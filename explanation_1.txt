Problem 1

For the Least-Recent Used Cache, a queue structure makes sense since a queue is a First-In First-Out (FIFO) structure. Therefore the oldest (least recently used) entry would be the first to be removed with O(1) efficiency when the cache reaches the capacity limit. Since the requirement is that all operations are O(1) and since lookup in a typical queue is worst-case O(n), I decided to maintain a dictionary of the key-values pairs for lookup purposes since adding/removing from a dictionary is O(1). When adding to/removing from the cache, both the queue and the dictionary need to be updated. The space complexity is at max the defined capacity for both the queue and the lookup dictionary 